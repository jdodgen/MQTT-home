#!/usr/bin/perl

package aaadmin;
use base qw( CGI::Application );
use lib '/var/www/alertaway.com/cgi-bin/admin';
use CGI;
use CGI::Session;
use CGI::Session::Auth;
use CGI::Carp qw(fatalsToBrowser warningsToBrowser);
use CGI qw(:standard);
use strict;
use DBI;
use DBTOOLS;
use HTML::Template;
use File::stat;
use Time::localtime;
#use http_processor;

my $main_db_name = '/home/alerta/main.db';
#my $state = $cgi->param('admin_state');
#my $databases_dir = '/home/alerta/ftp/databases/';

#if (-f $main_db_name)
#{
  #$dt->do("CREATE TABLE IF NOT EXISTS systems (sh,sl, primary_email, default_email, id, pan_id, pass_phrase, ip_addr, remote_ip_addr, time, send_me_db, push_db, reboot, network, primary key (pan_id))");
#}

$ENV{TZ} = "America/Los_Angeles";

sub setup {
    my $self = shift;

    $self->start_mode('login');
    $self->mode_param('cmd');
    $self->run_modes(
        'free' => 'showFreePage',
        'secret' => 'showSecretPage',
        'logout' => 'showLogoutPage',
        'login' => 'showLoginPage'
    );
    my %attr = (PrintError => 0,RaiseError => 0,AutoCommit => 1);
    my $dbh = DBI->connect("dbi:SQLite:$main_db_name","","",\%attr);
    if (!defined($dbh))
    {
        croak("could not connect to $main_db_name");
    }
    $self->{dt} = new DBTOOLS(dbh => $dbh, trace => 1);

    # new session object
    my $session = new CGI::Session(undef, $self->query, {Directory=>'/tmp'});
    $self->param('_session' => $session);

    # new authentication object
    my $auth = new CGI::Session::Auth({
        CGI => $self->query,
        Session => $session
    });
    #$self->{msg} = "??";
    $self->param('_auth' => $auth);
    $auth->authenticate();
    #$self->{msg} =  $auth->sessionCookie();
    # send session cookie
    $self->header_props( -cookie => $auth->sessionCookie() );
}

sub _auth {
    my $self = shift;

    return $self->param('_auth');
}



#sub showFreePage {
    #my $self = shift;

    #return <<HTML;
#<html>
#<head><title>Free page</title></head>
#<body>
#<h1>Free accessible page</h1>
#<p><a href="aaadmin.pl?cmd=secret">Secret page</a></p>
#</body>
#</html>
#HTML
#}

sub showSecretPage {
    my $self = shift;

    if (! $self->_auth->loggedIn) {
        $self->showLoginPage;
    }
    else {
        $self->showSecretData;
    }
}

sub showLoginPage {
    my $self = shift;

    return <<HTML;
<html>
<head><title>Not logged in</title></head>
<body>
<h1>You are not logged in $self->{msg} </h1>
<p>Please log in to see the secret page:</p>
<form action="aaadmin.pl" method="POST">
<input type="hidden" name="cmd" value="secret">
<p><input type="text" size="30" name="log_username" value="username"></p>
<p><input type="text" size="30" name="log_password" value="password"></p>
<p><input type="submit"></p>
</form>
</body>
</html>
HTML
}

sub showSecretData {
    my $self = shift;
    my $user = $self->{userid};
    return <<HTML;
<html>
<head><title>Secret page</title></head>
<body>
<h1>Secret data $self->{msg} </h1>
<p>There's more than one way to do it!</p>
<p><a href="aaadmin.pl?cmd=logout">Log out</a></p>
</body>
</html>
HTML
}

sub showLogoutPage {
    my $self = shift;

    $self->_auth->logout();

    return <<HTML;
<html>
<head><title>Logged out</title></head>
<body>
<h1>You have logged out.</h1>
<p><a href="http://alertaway.com">Secret page</a></p>
</body>
</html>
HTML
}

1;

#sub _login {

    ###
    ### check login credentials and load user profile
    ###

    #my $self = shift;
    #my ($username, $password) = @_;
    #my ($status,$cnt) = $self->dt->get_rec("select count() from systems where pan_id = %s and pass_phrase = %s", $username, $password);
    #carp "query returned $status $cnt";
    #$self->{msg} = "query returned $status $cnt";
    ## allow only the guest user, for real applications use a subclass
    #if ($cnt > 0) {
        #$self->_info("User '$username' logged in");
        #$self->{userid} = "foo";
        #$self->_loadProfile($self->{userid});
        #return 1;
    #}
    #return 0;
#}

package main;

my $app = new aaadmin;
$app->run();
